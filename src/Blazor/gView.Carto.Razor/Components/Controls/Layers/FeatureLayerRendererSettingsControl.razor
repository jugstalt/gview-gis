@inject PluginManagerService PluginManager
@inject ICartoApplicationScopeService AppScope
@inherits BaseHandler

@if(_featureRenderers is not null && _categories is not null)
{
    <GvGrid ColumnCount="3">
        <GvGridItem>
            <MudCheckBox T="bool"
                         Value="@(Layer?.FeatureRenderer is not null)"
                         ValueChanged="(chk) => RenderFeaturesChecked(chk)"
                         Label="Render features for this layer" />
            @if(Layer?.FeatureRenderer is not null) 
            {
                @foreach(var category in _categories)
                {
                    <GvCard Title="@category">
                        <GvCardContentNoPadding>
                            <MudList Dense="true" T="string"
                                     Style="padding:0px">
                                @foreach(var featureRenderer in _featureRenderers.Where(r=>category == r.Category))
                                {
                                    <MudListItem Style="white-space:nowrap;overflow:hidden" 
                                                 Dense="true"
                                                        Class="@(featureRenderer.GetType() == _selectedRendererType ? "gview-selected-item" : "")"
                                                        OnClick="() => SelectRenderer(featureRenderer)">
                                                @featureRenderer.Name
                                    </MudListItem>
                                }
                            </MudList>
                        </GvCardContentNoPadding>
                    </GvCard>
                }

                <GvCard Title="Copy From">
                    <MudList Dense="true" T="string"
                                     Style="padding:0px">
                        <MudListItem Style="white-space:nowrap;overflow:hidden"
                                     Dense="true"
                                     OnClick="OnCopyRendererClickAsync">
                            Other Layer ...
                        </MudListItem>
                        <MudListItem Style="white-space:nowrap;overflow:hidden"
                                     Dense="true"
                                     OnClick="OnImportRendererClickAsync">
                            Other Map (XML) ...
                        </MudListItem>
                    </MudList>
                </GvCard>
            }
        </GvGridItem>

        <GvGridItem Span="2">
            @if(Layer?.FeatureRenderer is not null &&  _selectedRendererType is not null)
            {
                var renderer = _featureRenderers.First(r => _selectedRendererType.Equals(r.GetType()));

                <GvCard Title="@renderer.Name">
                    <GvCardContent>
                        @if (_propertyPageRenderFragment is not null)
                        {
                            @(_propertyPageRenderFragment)
                        }
                    </GvCardContent>
                </GvCard>
            }
        </GvGridItem>
    </GvGrid>
}

@code {
    [Parameter] public IMap? Map { get; set; }
    [Parameter] public IFeatureLayer? Layer { get; set; }

    private IFeatureRenderer[]? _featureRenderers;
    private IPropertyPageDefinition[]? _propertyPageDefs;
    private string[]? _categories;

    private Type? _selectedRendererType;
    private IPropertyPageDefinition? _currentPropertyPage;
    private RenderFragment? _propertyPageRenderFragment;

    protected override Task OnParametersSetAsync() => HandleAsync(async () =>
    {
        await base.OnParametersSetAsync();

        if (Map is not null && Layer is not null)
        {
            _featureRenderers = PluginManager.GetPlugins<IFeatureRenderer>(gView.Framework.Common.Plugins.Type.IFeatureRenderer)
                                             .Where(r => r.CanRender(Layer, Map))
                                             .Select(r => r.GetType().Equals(Layer.FeatureRenderer?.GetType())
                                                            ? Layer.FeatureRenderer!
                                                            : r)
                                             .ToArray();

            foreach (var renderer in _featureRenderers)
            {
                if (renderer != Layer.FeatureRenderer && renderer is IDefault def)
                {
                    await def.DefaultIfEmpty(Layer);
                }
            }

            _categories = _featureRenderers.Select(r => r.Category)
                                           .Distinct()
                                           .ToArray();

            _propertyPageDefs = PluginManager.GetPlugins<IPropertyPageDefinition>(gView.Framework.Common.Plugins.Type.IPropertyPageDefinition)
                                             .Where(p => p.InterfaceType == typeof(IFeatureRenderer))
                                             .ToArray();

            SelectRenderer(Layer.FeatureRenderer);
        }
        else
        {
            _featureRenderers = null;
            _categories = null;
        }
    });

    private void SelectRenderer(IFeatureRenderer? featureRenderer) => Handle(() =>
    {
        _selectedRendererType = featureRenderer?.GetType();

        if (Layer is not null)
        {
            Layer.FeatureRenderer = featureRenderer;

            _currentPropertyPage = _propertyPageDefs?.FirstOrDefault(p => p.InstanceType == featureRenderer?.GetType());
            if (_currentPropertyPage is not null)
            {
                _propertyPageRenderFragment = new RenderFragment(builder =>
                {
                    var sequence = 0;
                    builder.OpenComponent(sequence, _currentPropertyPage.PropertyPageType);
                    builder.AddAttribute(++sequence, "Instance", Layer);
                    builder.CloseComponent();
                });
            }
            else
            {
                _propertyPageRenderFragment = null;
            }
        }
    });

    private void RenderFeaturesChecked(bool renderer) => Handle(() =>
    {
        if (Layer is null)
        {
            return;
        }

        if (renderer == false)
        {
            Layer.FeatureRenderer = null;
        }
        else
        {
            Layer.FeatureRenderer =
                _featureRenderers?.FirstOrDefault(r => r.GetType() == _selectedRendererType)
                ?? _featureRenderers?.FirstOrDefault(r => r is SimpleRenderer)
                ?? _featureRenderers?.FirstOrDefault();

            SelectRenderer(Layer.FeatureRenderer);
        }
    });

    private Task OnImportRendererClickAsync() => HandleAsync(async () =>
    {
        if (Layer is null) return;

        var lastAccessedDocuments = await AppScope.Settings.GetLastAccessedDocuments() ?? [];

        var previousMapModel = lastAccessedDocuments.Count() == 0
            ? new()
            : await AppScope.ShowModalDialog(
                typeof(Razor.Components.Dialogs.OpenPreviousMapDialog),
                "Previous opened maps ...",
                new Razor.Components.Dialogs.Models.OpenPreviousMapDialogModel()
                    {
                        Items = lastAccessedDocuments
                    }
            );

        if (previousMapModel is null) return;

        string? xmlFileName;
        if (previousMapModel.Selected == null)
        {
            var openMapModel = await AppScope.ShowKnownDialog(Framework.Blazor.KnownDialogs.ExplorerDialog,
                                        title: "Open map document",
                                        model: new ExplorerDialogModel()
                                        {
                                            Filters = new List<ExplorerDialogFilter> {
                                                new OpenFileFilter("Map", "*.mxl")
                                                },
                                            Mode = ExploerDialogMode.Open
                                        }
                                 );

            xmlFileName = openMapModel?.Result.ExplorerObjects.FirstOrDefault()?.FullName;
        } 
        else
        {
            xmlFileName = previousMapModel.Selected.Path;
        }

        if (String.IsNullOrEmpty(xmlFileName)) 
        {
            return;
        }

        var stream = new Framework.IO.XmlStream("");
        stream.ReadStream(xmlFileName);

        var cartoDocument = new CartoDocument(null);

        await stream.LoadAsync("MapDocument", cartoDocument);

        if (cartoDocument.Map is not null)
        {
            await SelectRendererAsync(cartoDocument.Map);  
        };
    });

    private Task OnCopyRendererClickAsync() => 
        Map is not null 
            ? SelectRendererAsync(Map)
            : Task.CompletedTask;

    private Task SelectRendererAsync(IMap map) => HandleAsync(async () =>
    {
        if (Layer is null) return;

        var layerModel = await AppScope.ShowModalDialog(
                typeof(SelectMapLayerDialog),
                "Select map layer",
                new SelectMapLayerDialogModel()
                {
                    Map = map,
                    LayerFilter = (layer) =>
                        layer switch
                        {
                            IFeatureLayer when Map == map && Layer.ID.Equals(layer.ID) => false,
                            IFeatureLayer featureLayer => 
                                featureLayer.FeatureRenderer is not null
                                && featureLayer.LayerGeometryType == Layer.LayerGeometryType,
                            _ => false
                        }
                }
        );

        var newFeatureRenderer = (layerModel?.SelectedLayer as IFeatureLayer)?.FeatureRenderer?.Clone() as IFeatureRenderer;

        if (newFeatureRenderer is not null)
        {
            Layer.FeatureRenderer = newFeatureRenderer;

            SelectRenderer(Layer.FeatureRenderer);
        }
    });
}